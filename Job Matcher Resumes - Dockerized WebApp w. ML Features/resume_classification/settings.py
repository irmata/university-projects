#AUTOGENERATED CODE WHEN CREATING A DJANGO PROJECT, CODE FROM KAI AND HASHEM

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
SECRET_KEY = "django-insecure-owyr82&s+)rft94)m-h!rnbjs$4os#*u-#=hx3v*&2ucr758!g"
DEBUG = True
ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "classifier",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "resume_classification.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'classifier/templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "resume_classification.wsgi.application"

# Check if we're in a testing environment
IS_TESTING = os.environ.get('DJANGO_TESTING', '') == 'True'

if IS_TESTING:
    # Local testing configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',  # Local SQLite database
        }
    }
else:
    # Production configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': '/app/database/db.sqlite3',  # Cloud-mounted SQLite database
        }
    }

# Redis Configuration for Sessions and Caching
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://10.246.100.251:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# CSRF and Session Cookie Configuration
SESSION_COOKIE_NAME = "sessionid"  # Default session cookie
CSRF_COOKIE_NAME = "csrftoken"  # Default CSRF cookie

# Set cookie domain to the root domain to allow persistence across subdomains/paths
SESSION_COOKIE_DOMAIN = ".34.13.144.154"  # Ensure persistence across subdomains/paths
CSRF_COOKIE_DOMAIN = ".34.13.144.154"  # Ensure persistence across subdomains/paths

# Secure Cookies Settings (WE DON'T NEED SECURITY RIGHT NOW)
CSRF_COOKIE_SECURE = False  
SESSION_COOKIE_SECURE = False  

# SameSite cookie settings (SUGGESTIONS FROM CHATGPT TO ENSURE MAXIMUM COMPATIBILITY)
CSRF_COOKIE_SAMESITE = 'Lax'  
SESSION_COOKIE_SAMESITE = 'Lax' 

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/classifier/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "classifier/static")]

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
